/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.4.2/userguide/building_java_projects.html
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    `java-library`
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

sourceSets.create("testing") {
  java {
    srcDir("src/testing")
  }
  compileClasspath += sourceSets.main.get().output
  runtimeClasspath += sourceSets.main.get().output
}

sourceSets {
  test {
    compileClasspath += files(sourceSets["testing"].java.getClassesDirectory())
    runtimeClasspath += files(sourceSets["testing"].java.getClassesDirectory())
  }
}

var testingImplementation = configurations["testingImplementation"]

testingImplementation.extendsFrom(configurations.implementation.get())

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation("org.junit.jupiter:junit-jupiter:5.8.1")
    //testImplementation("com.google.truth:truth:1.1.3")
    
    testingImplementation("com.github.ben-manes.caffeine:caffeine:2.9.3")
    testingImplementation("com.google.guava:guava:31.1-jre")
    testingImplementation("com.google.flogger:flogger:0.7.4")

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api("org.apache.commons:commons-math3:3.6.1")

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation("com.google.guava:guava:30.1.1-jre")
    implementation("joda-time:joda-time:2.10.14")
    implementation("javax.inject:javax.inject:1")
    implementation("io.github.java-diff-utils:java-diff-utils:4.11")
    implementation("com.google.truth:truth:1.1.3")

}

tasks.named<Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

java {
     toolchain {
         languageVersion.set(JavaLanguageVersion.of(11))
     }
 }

tasks.withType<JavaCompile>().configureEach {
    javaCompiler.set(javaToolchains.compilerFor {
        languageVersion.set(JavaLanguageVersion.of(8))
    })
}
